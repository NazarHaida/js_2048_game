{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nconst $09e991522ca7e64e$var$ARROW_LEFT = \"ArrowLeft\";\nconst $09e991522ca7e64e$var$ARROW_RIGHT = \"ArrowRight\";\nconst $09e991522ca7e64e$var$ARROW_UP = \"ArrowUp\";\nconst $09e991522ca7e64e$var$ARROW_DOWN = \"ArrowDown\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.board = initialState.map((row)=>row.slice());\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    placeRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const { row: row, col: col } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[row][col] = Math.random() < 0.1 ? 4 : 2;\n        }\n    }\n    moveLeft() {\n        let boardChanged = false;\n        for(let row = 0; row < 4; row++){\n            const newRow = this.board[row].filter((tile)=>tile !== 0);\n            for(let col = 0; col < newRow.length - 1; col++)if (newRow[col] === newRow[col + 1]) {\n                newRow[col] *= 2;\n                this.score += newRow[col];\n                newRow.splice(col + 1, 1);\n                newRow.push(0);\n            }\n            while(newRow.length < 4)newRow.push(0);\n            if (!this.arraysEqual(newRow, this.board[row])) {\n                boardChanged = true;\n                this.board[row] = newRow;\n            }\n        }\n        if (boardChanged) {\n            this.placeRandomTile();\n            if (this.checkWin()) return;\n            this.checkGameOver();\n        }\n    }\n    moveRight() {\n        let boardChanged = false;\n        for(let row = 0; row < 4; row++){\n            const newRow = this.board[row].reverse().filter((tile)=>tile !== 0);\n            for(let col = 0; col < newRow.length - 1; col++)if (newRow[col] === newRow[col + 1]) {\n                newRow[col] *= 2;\n                this.score += newRow[col];\n                newRow.splice(col + 1, 1);\n                newRow.push(0);\n            }\n            while(newRow.length < 4)newRow.push(0);\n            newRow.reverse();\n            if (!this.arraysEqual(newRow, this.board[row])) {\n                boardChanged = true;\n                this.board[row] = newRow;\n            }\n        }\n        if (boardChanged) {\n            this.placeRandomTile();\n            if (this.checkWin()) return;\n            this.checkGameOver();\n        }\n    }\n    moveUp() {\n        let boardChanged = false;\n        for(let col = 0; col < 4; col++){\n            const newCol = [];\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            for(let i = 0; i < newCol.length - 1; i++)if (newCol[i] === newCol[i + 1]) {\n                newCol[i] *= 2;\n                this.score += newCol[i];\n                newCol.splice(i + 1, 1);\n                newCol.push(0);\n            }\n            while(newCol.length < 4)newCol.push(0);\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== newCol[row]) {\n                boardChanged = true;\n                this.board[row][col] = newCol[row];\n            }\n        }\n        if (boardChanged) {\n            this.placeRandomTile();\n            if (this.checkWin()) return;\n            this.checkGameOver();\n        }\n    }\n    moveDown() {\n        let boardChanged = false;\n        for(let col = 0; col < 4; col++){\n            const newCol = [];\n            for(let row = 3; row >= 0; row--)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            for(let i = 0; i < newCol.length - 1; i++)if (newCol[i] === newCol[i + 1]) {\n                newCol[i] *= 2;\n                this.score += newCol[i];\n                newCol.splice(i + 1, 1);\n                newCol.push(0);\n            }\n            while(newCol.length < 4)newCol.push(0);\n            for(let row = 3; row >= 0; row--)if (this.board[row][col] !== newCol[3 - row]) {\n                boardChanged = true;\n                this.board[row][col] = newCol[3 - row];\n            }\n        }\n        if (boardChanged) {\n            this.placeRandomTile();\n            if (this.checkWin()) return;\n            this.checkGameOver();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board.map((row)=>row.slice());\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.score = 0;\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.placeRandomTile();\n        this.placeRandomTile();\n    }\n    arraysEqual(arr1, arr2) {\n        if (arr1.length !== arr2.length) return false;\n        for(let i = 0; i < arr1.length; i++){\n            if (arr1[i] !== arr2[i]) return false;\n        }\n        return true;\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = \"idle\";\n        this.start();\n    }\n    checkWin() {\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 2048) {\n                this.status = \"win\";\n                return true;\n            }\n        }\n        return false;\n    }\n    checkGameOver() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === 0) return false;\n        }\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return false;\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n        }\n        this.status = \"lose\";\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".button.start\");\ndocument.addEventListener(\"keydown\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    let moveMade = false;\n    switch(event.key){\n        case $09e991522ca7e64e$var$ARROW_LEFT:\n            $09e991522ca7e64e$var$game.moveLeft();\n            moveMade = true;\n            break;\n        case $09e991522ca7e64e$var$ARROW_RIGHT:\n            $09e991522ca7e64e$var$game.moveRight();\n            moveMade = true;\n            break;\n        case $09e991522ca7e64e$var$ARROW_UP:\n            $09e991522ca7e64e$var$game.moveUp();\n            moveMade = true;\n            break;\n        case $09e991522ca7e64e$var$ARROW_DOWN:\n            $09e991522ca7e64e$var$game.moveDown();\n            moveMade = true;\n            break;\n    }\n    if (moveMade) {\n        $09e991522ca7e64e$var$update();\n        if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$showWin();\n        else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$showLose();\n    }\n});\nfunction $09e991522ca7e64e$var$update() {\n    const board = $09e991522ca7e64e$var$game.getState();\n    const cells = document.querySelectorAll(\".field-cell\");\n    let cellIndex = 0;\n    for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n        const value = board[row][col];\n        const cell = cells[cellIndex];\n        cell.textContent = value === 0 ? \"\" : value;\n        cell.className = `field-cell field-cell--${value}`;\n        cellIndex++;\n    }\n    document.querySelector(\".game-score\").textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$showWin() {\n    document.querySelector(\".message-win\").classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$showLose() {\n    document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$hideMessages() {\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n}\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\" || $09e991522ca7e64e$var$game.getStatus() === \"idle\" || $09e991522ca7e64e$var$game.getStatus() === \"lose\" || $09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$update();\n        $09e991522ca7e64e$var$hideMessages();\n        $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n    }\n});\n\n\n//# sourceMappingURL=index.6608f488.js.map\n","'use strict';\n\nconst ARROW_LEFT = 'ArrowLeft';\nconst ARROW_RIGHT = 'ArrowRight';\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startBtn = document.querySelector('.button.start');\n\ndocument.addEventListener('keydown', () => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  let moveMade = false;\n\n  switch (event.key) {\n    case ARROW_LEFT:\n      game.moveLeft();\n      moveMade = true;\n      break;\n\n    case ARROW_RIGHT:\n      game.moveRight();\n      moveMade = true;\n      break;\n\n    case ARROW_UP:\n      game.moveUp();\n      moveMade = true;\n      break;\n\n    case ARROW_DOWN:\n      game.moveDown();\n      moveMade = true;\n      break;\n  }\n\n  if (moveMade) {\n    update();\n\n    if (game.getStatus() === 'win') {\n      showWin();\n    } else if (game.getStatus() === 'lose') {\n      showLose();\n    }\n  }\n});\n\nfunction update() {\n  const board = game.getState();\n  const cells = document.querySelectorAll('.field-cell');\n  let cellIndex = 0;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const value = board[row][col];\n      const cell = cells[cellIndex];\n\n      cell.textContent = value === 0 ? '' : value;\n      cell.className = `field-cell field-cell--${value}`;\n\n      cellIndex++;\n    }\n  }\n\n  document.querySelector('.game-score').textContent = game.getScore();\n}\n\nfunction showWin() {\n  document.querySelector('.message-win').classList.remove('hidden');\n}\n\nfunction showLose() {\n  document.querySelector('.message-lose').classList.remove('hidden');\n}\n\nfunction hideMessages() {\n  document.querySelector('.message-win').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n  document.querySelector('.message-start').classList.add('hidden');\n}\n\nstartBtn.addEventListener('click', () => {\n  startBtn.textContent = 'Restart';\n\n  if (\n    game.getStatus() === 'win' ||\n    game.getStatus() === 'idle' ||\n    game.getStatus() === 'lose' ||\n    game.getStatus() === 'playing'\n  ) {\n    game.restart();\n    update();\n    hideMessages();\n    startBtn.textContent = 'Restart';\n  }\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState.map((row) => row.slice());\n\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  placeRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row, col } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.1 ? 4 : 2;\n    }\n  }\n\n  moveLeft() {\n    let boardChanged = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.board[row].filter((tile) => tile !== 0);\n\n      for (let col = 0; col < newRow.length - 1; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          newRow[col] *= 2;\n          this.score += newRow[col];\n          newRow.splice(col + 1, 1);\n          newRow.push(0);\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      if (!this.arraysEqual(newRow, this.board[row])) {\n        boardChanged = true;\n        this.board[row] = newRow;\n      }\n    }\n\n    if (boardChanged) {\n      this.placeRandomTile();\n\n      if (this.checkWin()) {\n        return;\n      }\n\n      if (this.checkGameOver()) {\n      }\n    }\n  }\n\n  moveRight() {\n    let boardChanged = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.board[row].reverse().filter((tile) => tile !== 0);\n\n      for (let col = 0; col < newRow.length - 1; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          newRow[col] *= 2;\n          this.score += newRow[col];\n          newRow.splice(col + 1, 1);\n          newRow.push(0);\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      newRow.reverse();\n\n      if (!this.arraysEqual(newRow, this.board[row])) {\n        boardChanged = true;\n        this.board[row] = newRow;\n      }\n    }\n\n    if (boardChanged) {\n      this.placeRandomTile();\n\n      if (this.checkWin()) {\n        return;\n      }\n\n      if (this.checkGameOver()) {\n      }\n    }\n  }\n\n  moveUp() {\n    let boardChanged = false;\n\n    for (let col = 0; col < 4; col++) {\n      const newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length - 1; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          this.score += newCol[i];\n          newCol.splice(i + 1, 1);\n          newCol.push(0);\n        }\n      }\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          boardChanged = true;\n          this.board[row][col] = newCol[row];\n        }\n      }\n    }\n\n    if (boardChanged) {\n      this.placeRandomTile();\n\n      if (this.checkWin()) {\n        return;\n      }\n\n      if (this.checkGameOver()) {\n      }\n    }\n  }\n\n  moveDown() {\n    let boardChanged = false;\n\n    for (let col = 0; col < 4; col++) {\n      const newCol = [];\n\n      for (let row = 3; row >= 0; row--) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length - 1; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          this.score += newCol[i];\n          newCol.splice(i + 1, 1);\n          newCol.push(0);\n        }\n      }\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      for (let row = 3; row >= 0; row--) {\n        if (this.board[row][col] !== newCol[3 - row]) {\n          boardChanged = true;\n          this.board[row][col] = newCol[3 - row];\n        }\n      }\n    }\n\n    if (boardChanged) {\n      this.placeRandomTile();\n\n      if (this.checkWin()) {\n        return;\n      }\n\n      if (this.checkGameOver()) {\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board.map((row) => row.slice());\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.score = 0;\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.placeRandomTile();\n    this.placeRandomTile();\n  }\n\n  arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.start();\n  }\n\n  checkWin() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 2048) {\n          this.status = 'win';\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkGameOver() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n      }\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return false;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    this.status = 'lose';\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","map","row","slice","score","status","placeRandomTile","emptyCells","col","push","length","Math","floor","random","moveLeft","boardChanged","newRow","filter","tile","splice","arraysEqual","checkWin","checkGameOver","moveRight","reverse","moveUp","newCol","i","moveDown","getScore","getState","getStatus","start","arr1","arr2","restart","$09e991522ca7e64e$var$startBtn","document","querySelector","$09e991522ca7e64e$var$update","cells","querySelectorAll","cellIndex","value","cell","textContent","className","addEventListener","moveMade","event","key","classList","remove","add"],"version":3,"file":"index.6608f488.js.map"}